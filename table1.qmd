---
title: "table1"
format: html
---

```{r setup, include=FALSE}
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(tableone)
library(kableExtra)
```

```{r}
# read in the data/DiabScreening_a.txt file, which uses pipe delimiters
data <- read.table("data/DiabScreening_a.txt", sep = "|", header = TRUE, fill = TRUE, fileEncoding = "UTF-16LE", stringsAsFactors = FALSE, na.strings = "")

# Read the data from the pipe-delimited text file
ses_data <- read.table("data/DiabSocioEcon_a.txt", sep = "|", header = TRUE, fill = TRUE, fileEncoding = "UTF-16LE", stringsAsFactors = FALSE, na.strings = "")
ses_data <- ses_data %>%
  # Trim whitespace in character variables
  mutate(across(where(is.character), ~str_trim(.))) %>%
  # Convert categorical variables to factors
  mutate(
    EducationLevel = factor(EducationLevel),
    AnnualIncome = factor(AnnualIncome),
    InsPrivate = as.numeric(InsPrivate)
  ) %>%
  # Handle missing values explicitly if needed
  mutate(across(starts_with("Ins"), ~ if_else(is.na(.), 0, as.numeric(.))))
  

physical_data <- read.table("data/DiabPhysExam_a.txt", sep = "|", header = TRUE, fill = TRUE, fileEncoding = "UTF-16LE", stringsAsFactors = FALSE, na.strings = "")

# mutate BMI using weight (lbs) and height (cm) in physical data
physical_data <- physical_data %>%
  mutate(BMI = (Weight / 2.20462) / ((Height) ^ 2))

# left join ses_data to data using PtID
data <- left_join(data, ses_data, by = "PtID")
data <- left_join(data, physical_data, by = "PtID")

data <- data %>%
  mutate(AgeGroup = ifelse(AgeAtEnrollment >= 18, ">=18", "<18"),
         EducationLevel = case_when(
           grepl("^Bach", EducationLevel) ~ "Bachelor's Degree",
           grepl("^Mast", EducationLevel) ~ "Master's Degree",
           grepl("^Prof", EducationLevel) ~ "Professional Degree",
           grepl("^Some", EducationLevel) ~ "Some college but no degree",
           grepl("^Assoc", EducationLevel) ~ "Associate Degree",
           grepl("^High", EducationLevel) ~ "High school graduate/diploma/GED",
           grepl("^Doct", EducationLevel) ~ "Doctorate Degree",
           TRUE ~ EducationLevel
         )) %>%
        # GRoup 10th grade, 9th grade, Associate Degree, Some college but no degree into "Less than Bachelor's degree"
        mutate(EducationLevel = ifelse(EducationLevel %in% c("10th grade", "9th grade", "Associate Degree", "Some college but no degree", "High school graduate/diploma/GED"), "Less than Bachelor's degree", EducationLevel)) %>%
        mutate(MeansInsAdmin = case_when(
          InsModPump == 1 ~ "Pump",
          InsModInjections == 1 ~ "Injections",
          TRUE ~ "Other"
        ))
```

```{r}
# Define variables for Table 1
vars <- c("AgeAtEnrollment", "AgeGroup", "Gender", "Race", "Ethnicity", "BMI", "AnnualIncome", "EducationLevel", "CGMUseStat", "MeansInsAdmin")

# Categorical variables
factorVars <- c("Gender", "Race", "Ethnicity", "AnnualIncome", "EducationLevel", "CGMUseStat", "MeansInsAdmin")

# Create Table 1, strata = group (control vs )
table1 <- CreateTableOne(vars = vars, data = data, factorVars = factorVars)

# Convert Table 1 to a dataframe
table1_df <- print(table1, strata="AgeGroup", showAllLevels = TRUE, formatOptions = list(big.mark = ","), printToggle = FALSE)

# Create HTML table using kableExtra
table1_html <- table1_df %>%
  kbl(caption = "Table 1: Cohort Characteristics by Age Group") %>%
  kable_classic(full_width = FALSE, html_font = "Arial")

table1_html

# Save HTML table to a file
#save_kable(table1_html, "table1.html")
```

```{r}
ggplot(data, aes(x = AgeAtEnrollment)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Age Distribution of Participants", x = "Age", y = "Frequency") +
  theme_stata()
```

```{r}
# Bar Plot of Race Proportions
race_proportions <- data %>%
  count(Race) %>%
  mutate(Proportion = n / sum(n) * 100)

ggplot(race_proportions, aes(x = reorder(Race, -Proportion), y = Proportion)) +
  geom_bar(stat = "identity", fill = "lightgreen", color = "black") +
  labs(title = "Race Proportions", x = "Race", y = "Proportion (%)") +
  theme_stata() +
  coord_flip() +
  theme(axis.text.y = element_text(angle = 0, hjust = 1))

```
